[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_menu_width = 180

let g:go_bin_path = $HOME."/go/bin"
'''

[[plugins]]
repo = 'Shougo/neosnippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'
hook_add = '''
let g:neocomplcache_snippets_dir = '~/.config/nvim/snippets'
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> *
  \ denite#do_map('toggle_select_all').'j'
endfunction
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
depends = 'denite.nvim'
hook_add = '''
nnoremap <silent> K :<C-u>DeniteCursorWord -immediately-1 -buffer-name=gtags_def gtags_def<CR>
nnoremap <silent> R :<C-u>DeniteCursorWord -immediately-1 -buffer-name=gtags_ref gtags_ref<CR>
'''

[[plugins]]
repo = 'iyuuya/denite-rails'
on_ft = 'ruby'
hook_add = '''
nnoremap <silent> <Leader>ab :<C-u>Denite -start-filter=1 rails:ability<CR>
nnoremap <silent> <Leader>as :<C-u>Denite -start-filter=1 rails:asset<CR>
nnoremap <silent> <Leader>at :<C-u>Denite -start-filter=1 rails:attribute<CR>
nnoremap <silent> <Leader>cf :<C-u>Denite -start-filter=1 rails:config<CR>
nnoremap <silent> <Leader>ct :<C-u>Denite -start-filter=1 rails:controller<CR>
nnoremap <silent> <Leader>db :<C-u>Denite -start-filter=1 rails:db<CR>
nnoremap <silent> <Leader>de :<C-u>Denite -start-filter=1 rails:decorator<CR>
nnoremap <silent> <Leader>do :<C-u>Denite -start-filter=1 rails:domain<CR>
nnoremap <silent> <Leader>fa :<C-u>Denite -start-filter=1 rails:factory<CR>
nnoremap <silent> <Leader>fo :<C-u>Denite -start-filter=1 rails:form<CR>
nnoremap <silent> <Leader>he :<C-u>Denite -start-filter=1 rails:helper<CR>
nnoremap <silent> <Leader>jo :<C-u>Denite -start-filter=1 rails:job<CR>
nnoremap <silent> <Leader>lo :<C-u>Denite -start-filter=1 rails:loyalty<CR>
nnoremap <silent> <Leader>ma :<C-u>Denite -start-filter=1 rails:mailer<CR>
nnoremap <silent> <Leader>mo :<C-u>Denite -start-filter=1 rails:model<CR>
nnoremap <silent> <Leader>po :<C-u>Denite -start-filter=1 rails:policy<CR>
nnoremap <silent> <Leader>pr :<C-u>Denite -start-filter=1 rails:presenter<CR>
nnoremap <silent> <Leader>qu :<C-u>Denite -start-filter=1 rails:query<CR>
nnoremap <silent> <Leader>sl :<C-u>Denite -start-filter=1 rails:serializer<CR>
nnoremap <silent> <Leader>sv :<C-u>Denite -start-filter=1 rails:service<CR>
nnoremap <silent> <Leader>sp :<C-u>Denite -start-filter=1 rails:spec<CR>
nnoremap <silent> <Leader>te :<C-u>Denite -start-filter=1 rails:test<CR>
nnoremap <silent> <Leader>up :<C-u>Denite -start-filter=1 rails:uploader<CR>
nnoremap <silent> <Leader>va :<C-u>Denite -start-filter=1 rails:validator<CR>
nnoremap <silent> <Leader>vi :<C-u>Denite -start-filter=1 rails:view<CR>
'''
depends = 'denite.nvim'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
autocmd FileType unite nnoremap <silent> <buffer> <C-g> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <C-g> <ESC>:q<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0,
      \ 'auto_expand' : 1,
      \ 'parent' : 0,
      \ })
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
autocmd FileType vimfiler call s:vimfiler_my_settings()
function! s:vimfiler_my_settings()
  nnoremap <silent><buffer><expr> s vimfiler#do_switch_action('vsplit')
  nnoremap <silent><buffer><expr> v vimfiler#do_switch_action('split')
  nnoremap <silent><buffer><expr> t vimfiler#do_action('tabopen')
  nunmap <buffer> <C-l>
endfunction
nnoremap <silent> fe :<C-u>VimFilerBufferDir -quit<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
  \ "_" : {
  \   "runner" : "vimproc",
  \   "runner/vimproc/updatetime" : 60
  \ },
  \ "haskell" : {
  \   "exec" : "stack runghc %s"
  \ },
  \ "markdown" : {
  \   "outputter" : "null",
  \   "command" : "open",
  \   "cmdopt" : "-a",
  \   "args" : "Marked",
  \   "exec" : "%c %o %a %s",
  \ },
  \ "rst" : {
  \   "outputter" : "null",
  \   "command" : "open",
  \   "cmdopt" : "-a",
  \   "args" : "Marked",
  \   "exec" : "%c %o %a %s",
  \ },
  \ 'ruby': {
  \   'command': 'ruby',
  \   'exec': '%c %s'
  \ },
  \ 'ruby.bundle': {
  \   'command': 'ruby',
  \   'exec': 'bundle exec %c %s'
  \ },
  \ 'rspec/normal': {
  \   'type': 'rspec/normal',
  \   'command': 'rspec',
  \   'exec': '%c %s'
  \ },
  \ 'rspec/bundle': {
  \   'type': 'rspec/bundle',
  \   'command': 'rspec',
  \   'exec': 'bundle exec %c %s'
  \ },
  \ 'python': {
  \   'command': 'python3',
  \   'exec': ['%c %s']
  \ },
  \ 'swift': {
  \   'command': 'swift',
  \   'exec': ['%c %s']
  \ },
  \ 'jsx': {
  \   'command': './node_modules/.bin/babel',
  \   'outputter': 'buffer:filetype=javascript',
  \   'exec': ['%c %s']
  \ },
  \ 'dhall': {
  \   'outputter': 'buffer:filetype=json',
  \   'command': 'dhall-to-json',
  \   'exec': ['%c --explain --pretty --omitNull <%s']
  \ },
  \ 'typescript': {
  \   'command': 'ts-node',
  \   'exec': ['%c %s']
  \ },
  \ 'coffee': {
  \   'command': 'coffee',
  \   'outputter': 'buffer:filetype=javascript',
  \   'exec': ['%c -cbp %s']
  \ }}
function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'rspec/bundle'}
endfunction
autocmd BufReadPost *_spec.rb call RSpecQuickrun()
'''

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_ft = 'quickrun'
depends = 'vim-quickrun'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
au VimEnter * nested colorscheme iceberg
au VimEnter * highlight Visual ctermbg=16
'''

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
let g:tcomment_opleader1 = 'gc'
'''

# textobj
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-syntax'
[[plugins]]
repo = 'kana/vim-textobj-lastpat'
[[plugins]]
repo = 'kana/vim-textobj-indent'
[[plugins]]
repo = 'kana/vim-textobj-function'
[[plugins]]
repo = 'kana/vim-textobj-fold'
[[plugins]]
repo = 'kana/vim-textobj-entire'
[[plugins]]
repo = 'kana/vim-textobj-jabraces'

# operator
[[plugins]]
repo = 'vim-scripts/operator-user'
[[plugins]]
repo = 'vim-scripts/operator-replace'
[[plugins]]
repo = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'vim-scripts/camelcasemotion'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#branch#enabled = 0
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'

[[plugins]]
repo = 'sbdchd/neoformat'

[[plugins]]
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
let g:Gtags_Auto_Map = 0
let g:Gtags_OpenQuickfixWindow = 1
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
let g:gen_tags#ctags_auto_gen = 1
let g:gen_tags#gtags_auto_gen = 1
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <silent> T :<C-u>TagbarToggle<CR>
let g:tagbar_autofocus = 1
'''

#
# Markdown
#
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = 'markdown'
build = 'cd app & yarn install'
hook_add = '''
let g:mkdp_auto_start = 1
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_open_ip = ''
let g:mkdp_browser = ''
let g:mkdp_echo_preview_url = 0
let g:mkdp_browserfunc = ''
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_port = ''
let g:mkdp_page_title = '「${name}」'
'''

#
# Ruby
#
[[plugins]]
repo = 'tpope/vim-rails.git'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'thoughtbot/vim-rspec'
on_ft = 'ruby'

[[plugins]]
repo = 'noprompt/vim-yardoc'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['ruby', 'typescript']
hook_add = '''
let g:ale_linters = {
    \ 'vue': ['tslint', 'tsserver'],
    \ 'ruby': ['rubocop'],
    \ }
let g:ale_fixers = {
    \ 'javascript': ['prettier'],
    \ 'typescript': ['prettier'],
    \ 'ruby': ['rubocop'],
    \ }
let g:ale_fix_on_save = 0
let g:ale_sign_column_always = 1
'''

[[plugins]]
repo = 'janko-m/vim-test'
on_ft = ['ruby', 'javascript']
hook_add = '''
nnoremap <silent> <C-\> :TestNearest -strategy=dispatch<CR>
nnoremap <silent> t<C-n> :TestNearest -strategy=dispatch<CR>
nnoremap <silent> t<C-f> :TestFile -strategy=dispatch<CR>
'''

#
# PHP
#
[[plugins]]
repo = 'phpactor/phpactor'
on_ft = ['php']
build = 'composer install'
hook_add = '''
nnoremap <silent><Leader>u  :<C-u>call phpactor#UseAdd()<CR>
nnoremap <silent><Leader>mm :<C-u>call phpactor#ContextMenu()<CR>
nnoremap <silent><Leader>nn :<C-u>call phpactor#Navigate()<CR>
nnoremap <silent><Leader>o  :<C-u>call phpactor#GotoDefinition()<CR>
nnoremap <silent><Leader>tt :<C-u>call phpactor#Transform()<CR>
nnoremap <silent><Leader>cc :<C-u>call phpactor#ClassNew()<CR>
nnoremap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:false)<CR>
vnoremap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:true)<CR>
vnoremap <silent><Leader>em :<C-u>call phpactor#ExtractMethod()<CR>
nnoremap <silent><Leader>o  :<C-u>call phpactor#GotoDefinition()<CR>
vnoremap <silent><Leader>hh :<C-u>call phpactor#Hover()<CR>
'''

[[plugins]]
repo  = 'kristijanhusak/deoplete-phpactor'
on_ft = ['php']

#
# Go
#
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_ft = 'go'

[[plugins]]
repo = 'SirVer/ultisnips'
on_ft = 'go'

[[plugins]]
repo = 'neomake/neomake'
on_ft = 'go'

[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = 'go'
hook_add = '''
let g:delve_backend = "native"
let g:delve_breakpoint_sign = "o"
'''

#
# TypeScript
#
# [[plugins]]
# on_ft = 'typescript'
# repo = 'leafgarland/typescript-vim'
#
# [[plugins]]
# on_ft = 'typescript'
# repo = 'Quramy/tsuquyomi'

#
# Haskell
#
# [[plugins]]
# repo = 'eagletmt/neco-ghc'
# on_ft = 'haskell'
# depends = 'deoplete.nvim'
#
# [[plugins]]
# repo = 'neovimhaskell/haskell-vim'
# on_ft = 'haskell'
#
# [[plugins]]
# repo = 'alx741/vim-hindent'
# on_ft = 'haskell'
#
# [[plugins]]
# repo = 'parsonsmatt/intero-neovim'
# on_ft = 'haskell'

#
# Other FileTypes
#
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'b4b4r07/vim-sqlfmt'
on_ft = 'sql'
hook_add = '''
let g:sqlfmt_command = "sqlfmt"
let g:sqlfmt_options = ""
let g:sqlfmt_auto = 0
'''

# [[plugins]]
# repo = 'elmcast/elm-vim'
# on_ft = 'elm'
#
# [[plugins]]
# repo = 'posva/vim-vue'
# on_ft = 'vue'
# hook_add = '''
# autocmd FileType vue syntax sync fromstart
# '''
#
# [[plugins]]
# repo = 'kchmck/vim-coffee-script'
# on_ft = 'coffee'
#
# [[plugins]]
# repo = 'vmchale/dhall-vim'
# on_ft = 'dhall'
