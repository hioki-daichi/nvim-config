[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'

#
# Rust
#
# https://github.com/neoclide/coc.nvim
[[plugins]]
repo = 'neoclide/coc.nvim'
on_ft = ['rust', 'elm']
rev = 'release'
hook_add = '''
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>r <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>R <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

#
# Go
#
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_ft = 'go'

[[plugins]]
repo = 'SirVer/ultisnips'
on_ft = 'go'

[[plugins]]
repo = 'neomake/neomake'
on_ft = 'go'

[[plugins]]
repo = 'sebdah/vim-delve'
on_ft = 'go'
hook_add = '''
let g:delve_backend = "native"
let g:delve_breakpoint_sign = "o"
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
build = 'make'
depends = ['deoplete.nvim']
hook_add = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''

#
# Haskell
#
[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
depends = 'deoplete.nvim'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'alx741/vim-hindent'
on_ft = 'haskell'

[[plugins]]
repo = 'parsonsmatt/intero-neovim'
on_ft = 'haskell'

#
# Ruby
#
[[plugins]]
repo = 'tpope/vim-rails.git'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'thoughtbot/vim-rspec'
on_ft = 'ruby'

[[plugins]]
repo = 'noprompt/vim-yardoc'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['ruby', 'typescript', 'javascript', 'Dockerfile']
hook_add = '''
let g:ale_linters = {
    \ 'vue': ['tslint', 'tsserver'],
    \ 'ruby': ['rubocop'],
    \ 'rust': ['analyzer'],
    \ }
let g:ale_fixers = {
    \ 'javascript': ['prettier'],
    \ 'typescript': ['prettier'],
    \ 'ruby': ['rubocop'],
    \ }
'''

[[plugins]]
repo = 'janko-m/vim-test'
on_ft = ['ruby', 'javascript']
hook_add = '''
nnoremap <silent> <C-\> :TestNearest -strategy=dispatch<CR>
nnoremap <silent> t<C-n> :TestNearest -strategy=dispatch<CR>
nnoremap <silent> t<C-f> :TestFile -strategy=dispatch<CR>
'''

#
# PHP
#
[[plugins]]
repo = 'phpactor/phpactor'
on_ft = ['php']
build = 'composer install'
hook_add = '''
nnoremap <silent><Leader>u  :<C-u>call phpactor#UseAdd()<CR>
nnoremap <silent><Leader>mm :<C-u>call phpactor#ContextMenu()<CR>
nnoremap <silent><Leader>nn :<C-u>call phpactor#Navigate()<CR>
nnoremap <silent><Leader>o  :<C-u>call phpactor#GotoDefinition()<CR>
nnoremap <silent><Leader>tt :<C-u>call phpactor#Transform()<CR>
nnoremap <silent><Leader>cc :<C-u>call phpactor#ClassNew()<CR>
nnoremap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:false)<CR>
vnoremap <silent><Leader>ee :<C-u>call phpactor#ExtractExpression(v:true)<CR>
vnoremap <silent><Leader>em :<C-u>call phpactor#ExtractMethod()<CR>
nnoremap <silent><Leader>o  :<C-u>call phpactor#GotoDefinition()<CR>
vnoremap <silent><Leader>hh :<C-u>call phpactor#Hover()<CR>
'''
#
# TypeScript
#
[[plugins]]
on_ft = 'typescript'
repo = 'leafgarland/typescript-vim'

[[plugins]]
on_ft = 'typescript'
repo = 'Quramy/tsuquyomi'

#
# Elm
#
[[plugins]]
repo = 'ElmCast/elm-vim'
on_ft = 'elm'

#
# Vue
#
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
hook_add = '''
autocmd FileType vue syntax sync fromstart
'''

#
# Coffee
#
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'


[[plugins]]
repo  = 'kristijanhusak/deoplete-phpactor'
on_ft = ['php']

#
# CSS, HTML
#
[[plugins]]
repo = 'mattn/emmet-vim'
on_i = 1
on_ft = ['css', 'html']
hook_add = '''
let g:user_zen_settings = {'indentation' : '  '}
'''

#
# jinja
#
repo = 'Glench/Vim-Jinja2-Syntax'
on_ft = 'jinja'

#
# SQL
#
[[plugins]]
repo = 'b4b4r07/vim-sqlfmt'
on_ft = 'sql'
hook_add = '''
let g:sqlfmt_command = "sqlfmt"
let g:sqlfmt_options = ""
let g:sqlfmt_auto = 0
'''

#
# Terraform
#
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'
hook_add = '''
let g:terraform_fmt_on_save = 1
'''

#
# Markdown
#
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = 'markdown'
build = 'cd app & yarn install'
hook_add = '''
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 0
let g:mkdp_refresh_slow = 0
let g:mkdp_command_for_global = 0
let g:mkdp_open_to_the_world = 0
let g:mkdp_open_ip = ''
let g:mkdp_browser = ''
let g:mkdp_echo_preview_url = 0
let g:mkdp_browserfunc = ''
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''
let g:mkdp_port = ''
let g:mkdp_page_title = '「${name}」'
'''

#
# Quickrun
#
[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'
on_ft = 'quickrun'
depends = 'vim-quickrun'

#
# TOML
#
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

#
# Dhall
#
[[plugins]]
repo = 'vmchale/dhall-vim'
on_ft = 'dhall'

#
# GraphQL
#
repo = 'jparise/vim-graphql'
on_ft = 'graphql'

# #
# # vim-lsp
# #
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# on_ft = ['javascript', 'ruby', 'go']
# hook_add = '''
# if executable('typescript-language-server')
#   au User lsp_setup call lsp#register_server({
#     \ 'name': 'javascript support using typescript-language-server',
#     \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
#     \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},
#     \ 'whitelist': ['javascript', 'javascript.jsx'],
#     \ })
# endif
#
# if executable('solargraph')
#   " gem install solargraph
#   au User lsp_setup call lsp#register_server({
#     \ 'name': 'solargraph',
#     \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
#     \ 'initialization_options': {"diagnostics": "true"},
#     \ 'whitelist': ['ruby'],
#     \ })
# endif
#
# if executable('gopls')
#   au User lsp_setup call lsp#register_server({
#     \ 'name': 'gopls',
#     \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
#     \ 'whitelist': ['go'],
#     \ })
# endif
#
# nnoremap <silent> <Space>lh :<C-u>LspHover<CR>
# nnoremap <silent> <Space>ld :<C-u>LspDefinition<CR>
# nnoremap <silent> <Space>lr :<C-u>LspRename<CR>
# nnoremap <silent> <Space>lf :<C-u>LspDocumentFormat<CR>
#
# let g:lsp_diagnostics_enabled = 0
# '''
#
# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# on_ft = ['javascript', 'ruby', 'go']
#
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete.vim'
# on_ft = ['javascript', 'ruby', 'go']
#
# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
# on_ft = ['javascript', 'ruby', 'go']
#
# #
# # JavaScript
# #
# [[plugins]]
# repo = 'ryanolsonx/vim-lsp-javascript'
# on_ft = 'javascript'
#
# [[plugins]]
# repo = 'MaxMEllon/vim-jsx-pretty'
# on_ft = 'javascript'
#
# [[plugins]]
# repo = 'kristijanhusak/vim-js-file-import'
# on_ft = 'javascript'
# hook_add = '''
# let g:js_file_import_sort_after_insert = 1
# '''
